#!/usr/bin/env bash
##Created by Edward "edge226" Tunnah.

## Here is a basic template to make creating new entries easier.
## This is the minimum amount of information that a help usage should
## have.
clean_template_usage="
Name:

Description:

Usage:

Options:

Examples:

"

checkdeps_usage="
Name: 			checkdeps

Description:	checkdeps checks the depends, makedepends and
				checkdepends of a PKGBUILD file. Checkdeps can operate
				recursively on a single package or can operated via
				a package group. It also accumulates useful information
				on every package that has been scanned into the
				dependency chain tree that is then searchable.
				
				The current git location it scans is set to /var/abs and
				the dependency chain tree is stored in /tmp/lbf but I
				may change the location to be within /var so the files
				are not removed when the user reboots.

Usage:			checkdeps <Options>

Options:		

	-n			This flag is used to set the name of the package you are
				either doing a check on the dependency chain or
				gathering information. Leaving this blank will cause
				the program to ask for a package name to search.
	
	-r			This will cause the program to go into recursive mode
				for a single program dependency check. If the -g option
				is used checkdeps automatically turns on recursive mode.
		
	-g			This will cause the program to go into recursive mode
				for a package group eg. base base-devel. This mode
				automatically turns on the -r flag.
				
	-s			This mode is to be used in conjunction with the -r and
				-g flags. It will step through each iteration of the
				recursion methods so once I have a verbose and/or debug
				flag you can see what each iteration of the recursion
				does.
	
	-i			This flag will produce information on the searched
				program. It must be an entry that has already been
				populated by one of the non informational flags.

Examples:

		checkdeps
		
		checkdeps -n gcc
		
		checkdeps -rn gcc
		
		checkdeps -gn base-devel
		
		checkdeps -in gcc
		
"


## defines the usage of lb.
lb_usage="
Name:           lb


Description:    lucid-build compiles all PKGBUILD's recursively
                within the working directory. It has options to
                modify where it starts searching and what
                architecture you would like to build within that
                working directory.

                It also allows the user to choose the location
                of their repository and sub repository.

                Currently you can only use one architecture at
                a time but that may change in the future.


Usage:          lb (Options)

Options:

    -h or --help    You're reading it.

    -C              Create a new or Clean a current build root.
                    This is needed if you change your pacman.conf file.

    -p              Turns pretend mode on. This will not do any builds
                    or attempt to move or copy any files. It will still
                    scan if links exist. If this is combined with -C
                    it will still clean the build root.

    -l              Turns link verification off.

    -6              Compiles x86_64 packages. This cannot be combined
                    with -3 or -m.

    -3              Compiles i686 packages. This cannot be combined
                    with -6 or -m.

    -m              Compiles multilib packages. This cannot be combined
                    with -6 or -3.

    -d <directory>  Specifies the directory to start searching for
                    PKGBUILD files.

    -t <target>     This specifies the repository target. This location
                    is modified by this script to place things in a
                    proper repository location for the proper arch.
                    Default: /var/lucid/repo

    -r <repository> This will select the final repository the packages
                    are to be built in.
                    eg. core, extra, community, multilib.
                    Default: core

    -b <branch>     Change the default branch. staging, testing, stable.
                    Default: staging

    -v              Verbose. Forces compiling to show in the command
                    line output.

                    This option is not a suggested option.
                    This option should really only be used if you are
                    doing compiles for single programs or a small scale
                    package set.

                    This option removes the default of logging all
                    compile output to a file and in a multi-compile
                    senario will make debugging more difficult and also
                    increases the time taken to debug the process by
                    requiring the user of lb to manually scroll through
                    all compile output per package build in the set. It
                    also increases the difficulty of sharing any compile
                    information with others.

                    Outputting the data to the screen may actually
                    increase the amount of time it takes to perform your
                    compile if the output causes a bottleneck then
                    writing to disk and keeping the log file for later
                    reference is more efficient and makes sense.

                    Parsing through the data to find the relevent
                    information can be easier if using a integrated
                    development environment or another advanced editor.

                    This is not possible if this flag is set.

                    You have been warned.

Examples:
    The following examples will compile packages for the appropriate
    architecture starting in the current working directory.

    To build packages under the respective architectures.
    lb -6 ## x86_64 packages in /var/lucid/repo/unstable/x86_64/core
    lb -3 ## i686 packages in /var/lucid/repo/unstable/i686/core
    lb -m ## x86_64 packages in /var/lucid/repo/unstable/x86_64/core

    The following examples will compile packages for the appropriate
    architecture at the location you point it at.

    To build a single package point lb to the PKGBUILD file.
    lb -6d /var/abs/core/pacman -t /var/lucid/repo -r core
    lb -3d /var/abs/core/pacman -t /var/lucid/repo -r core
    lb -md /var/abs/multilib/zsnes -t /var/lucid/repo -r multilib

    The results of these commands would create a repository that has
    three directories inside of it. A directory for packages, sources
    and logs/debug information.

    The resulting location would be:

        -6 or (-m - replace core with multilib)
            /var/lucid/repo/unstable/x86_64/core

        -3
            /var/lucid/repo/unstable/i686/core

    Excluding the architecture field will default to x86_64 this can be
    modified within this script at any time.

    To build a package into the core repository:

        Inside the repo(core):
            lb -r core -b unstable

        Outside of the repo directory:
            lb -d /var/abs/core -r core -b unstable

    In both cases the results are the same:
        You magically get a repository at:
                /var/lucid/repo/unstable/x86_64/core"


## How to use cleanbuildroot.
cleanbuildroot_usage="
Name:           cleanbuildroot

Description:    cleanbuildroot can be used to both clean a build
                root and create a new build root. This is required
                if you are changing repositories in the devtools
                pacman.conf.

Usage:          cleanbuildroot (options)

Options:

    -c          Sets a pacman.conf file to use.
                Default: /usr/share/devtools/pacman-default.conf

    -m          sets a makepkg.conf file to use.
                Default: /usr/share/devtools/makepkg-\$buildarch.conf
                \$buildarch refers to the architecture set in lb.conf.

    -b          sets a custom build root directory.
                Default: /var/lib/lucidbuild/lucid-$buildarch
                See -m for \$buildarch information.

Examples:       Normally you should just be able to execute
                cleanbuildroot on its own with default settings. If for
                whatever reason you need to modify these settings
                manually you can do so with the flags above and examples
                below.

        cleanbuildroot -c /etc/pacman.conf -m /etc/makepkg.conf

                This would use the pacman.conf and makepkg.conf file
                from the local system if someone wanted to compile for
                the architecture and repositories their host system is
                using.
"
