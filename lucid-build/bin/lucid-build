#!/usr/bin/env bash
##Created by Edward "edge226" Tunnah.

## This is the script that actually builds the packages in the build
## area and then moves everything out of the respective build areas into
## a staging area to be processed. This script should always be run
## through the shorter lb command instead of manually since it will always
## pass the parameters in the same way.

## Deal with incoming parameters here.
compilecmd="$1" ## The program that starts the actual build.
buildarch="$2" ## The architecture. ie x86_64 or i686.
repo="$3" ## location for the repository to go. Packages go here.
verbose="$4" ## Flag for output to terminal instead of using a logfile
clean="$5" ## flag to clean the chroot before building.

## Set parameters for the program to be able to move all the resulting
## packages where they need to go.
pkg=".pkg.tar.xz" ## This mixed with $buildarch allows me to know the pkg.
pkgname="$(basename $(pwd))" ## Grab the package name via the source build dir.
pkgdir="$repo/packages/"    ## The location of the compiled binary packages.
srcdir="$repo/sources/$pkgname/" ## The source tarbal location.
logdir="$repo/logs/$pkgname/" ## The debug and log location.

## Create the appropriate repository directories.
mkdir -p "$pkgdir" "$logdir" "$srcdir"
rm -rf "$logdir/*"

if [ "$clean" = "yes" ]; then
    cleanbuildroot  ## if the -C flag is passed to lb this will clean
fi  ## the build root before the program continues to the build.

## Do the build.
printf "Building %s for the %s architecture.\n" "$pkgname" "$buildarch"
printf "The packages, sources and log directory for this build are: \n"
printf "%s\n%s\n%s\n" "$pkgdir" "$srcdir" "$logdir"
if [ "$verbose" = "yes" ]; then
    rm -rf /var/lib/lucidbuild/lucid-x86_64/*/build
    "$compilecmd"
elif [ "$verbose" = "no" ]; then
    rm -rf /var/lib/lucidbuild/lucid-x86_64/*/build
    "$compilecmd" > "$logdir$compilecmd-$pkgname.log"
fi

## Move the Sources, Packages and logs to the appropriate directories.
## also has the benefitted effect of cleaning the working directory.
## Things are done in this order for this reason:
## debug and logging information are moved first because each of those
## categories of files may contain files ending in $pkg.
## Next we move all packages that were created in the process.
## This leaves only source tarballs that we can move at the end.
printf "Moving files into their appropriate places.\n"
printf "Getting a few errors here is expected.\n"
mv *debug* "$logdir" ## Copying this before $pkg makes sure all debug files have been moved to the correct place.
mv *.log "$logdir" ## This does contain some tar files so I copy it before $pkg. This leaves only $pkg and $src info left
mv *"$buildarch$pkg" "$pkgdir" ## Copy the pkg into the repo.
mv *"multilib$pkg" "$pkgdir" ## Copy multilib packages into the repo, make sure to use -m through lb.
mv *"any$pkg" "$pkgdir" ## Copy any files for all architectures were compiled move them into the repo.
mv *.tar.* "$srcdir" ## Copy all remaining tarballs into the src directory.
# If a git build from a branch is used then make sure we clean up after it.
if [ -d ./*/ ]; then
    rm -rf ./*/
fi

## I was trying to fix the harmless errors here. Everything I seem to do fails at this though.
##for files in *debug*; do
    ##mv "$files" "$logdir" ## Check and move all debug information.
##done
##for files in *.log; do
    ##mv "$files" "$logdir" ## Check and move all log information.
##done
##for files in *"$pkg"; do
    ##mv "$files" "$pkgdir" ## Check and move all packages.
##done
##for files in *.tar.*; do
    ##mv "$files" "$srcdir" ## Check and move all sources.
##done
##for files in ./*; do
    ##cp "$files" "$srcdir" ## Copy the rest of the files into the sources
##done ## directory incase PKGBUILD files change. This gives us a reference on updates.

printf "Moving build information from $build stage in case of failure.\n\n"
if [ "$buildarch" = "x86_64" ]; then
    cp -R /var/lib/lucidbuild/lucid-x86_64/*/build "$logdir"
elif [ "$buildarch" = "i686" ]; then
    cp -R /var/lib/lucidbuild/lucid-i686/*/build "$logdir"
fi
